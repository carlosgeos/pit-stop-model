<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>

const int MECH = 12; 
const int PITS = 3;


typedef int[0,PITS-1] pit_t; 
typedef int[0,MECH-1] mech_t; 


broadcast chan inPosition[PITS];
bool wheel[MECH*PITS], incoming[PITS], leaving[PITS];
clock clocks[PITS];</declaration><template><name x="5" y="5">Mechanic</name><parameter>int[0,MECH-1] mech</parameter><declaration>int mod(){
	return mech % PITS;
}</declaration><location id="id0" x="-40" y="200"><name x="-50" y="170">Working</name></location><location id="id1" x="280" y="-24" color="#ff0000"><name x="270" y="-54">Problems</name></location><location id="id2" x="-368" y="200" color="#00ff00"><name x="-416" y="168">Waiting</name></location><location id="id3" x="72" y="-96"><name x="62" y="-126">Preparing</name></location><location id="id4" x="72" y="104"><name x="88" y="72">mechInPosition</name></location><init ref="id2"/><transition action=""><source ref="id3"/><target ref="id1"/><label kind="synchronisation" x="168" y="-89">inPosition[mod()]?</label></transition><transition action=""><source ref="id2"/><target ref="id3"/></transition><transition action=""><source ref="id4"/><target ref="id0"/><label kind="synchronisation" x="32" y="144">inPosition[mod()]?</label></transition><transition action=""><source ref="id0"/><target ref="id2"/><label kind="assignment" x="-264" y="200">wheel[mech]=1</label></transition><transition controllable="false" action=""><source ref="id3"/><target ref="id4"/></transition></template><template><name>Pit</name><parameter>int[0, PITS-1] id</parameter><declaration>const int mech_per_pit = MECH/PITS ;

int wheelsReady()
{
	int it;
	for(it=0; it&lt;mech_per_pit; ++it)
	{
		if(!wheel[id +it*PITS]) 
			return 0;
	}
	return 1;
}

int nextCarIncoming()
{
	if(id == PITS-1)
		return 0;
	else
		return incoming[id+1];
}

int previousCarLeaving()
{
	if(id == 0)
		return 0;
	else
		return incoming[id-1];
}</declaration><location id="id5" x="-384" y="344"><name x="-424" y="336">Left</name></location><location id="id6" x="-248" y="120"><name x="-232" y="112">CarInPos</name></location><location id="id7" x="40" y="80" color="#ff0000"><name x="30" y="50">Crash</name></location><location id="id8" x="-248" y="-104"><name x="-258" y="-134">IncomingCar</name></location><location id="id9" x="-248" y="344" color="#00ff00"><name x="-258" y="314">Leave</name></location><location id="id10" x="-384" y="-104"><name x="-400" y="-136">Pit</name></location><init ref="id10"/><transition action=""><source ref="id6"/><target ref="id9"/><label kind="guard" x="-368" y="168">wheelsReady()==1</label></transition><transition controllable="false" action=""><source ref="id5"/><target ref="id10"/><label kind="assignment" x="-464" y="120">leaving[id]=0</label></transition><transition action=""><source ref="id9"/><target ref="id5"/><label kind="assignment" x="-376" y="344">leaving[id]=1</label></transition><transition action=""><source ref="id9"/><target ref="id7"/><label kind="guard" x="-104" y="224">previousCarLeaving() == 1</label></transition><transition action=""><source ref="id8"/><target ref="id6"/><label kind="guard" x="-376" y="-48">nextCarIncoming()==0 &amp;&amp;
clocks[id] &lt;= 10 &amp;&amp;
clocks[id] &gt;3</label><label kind="synchronisation" x="-344" y="8">inPosition[id]!</label><label kind="assignment" x="-344" y="24">incoming[id]=0</label></transition><transition action=""><source ref="id8"/><target ref="id7"/><label kind="guard" x="-112" y="-40">nextCarIncoming()==1 &amp;&amp;
clocks[id]&gt;10</label><label kind="comments">problem</label></transition><transition controllable="false" action=""><source ref="id10"/><target ref="id8"/><label kind="assignment" x="-368" y="-104">incoming[id]=1,
clocks[id]=0</label></transition></template><system>// List one or more processes to be composed into a system.
/*
Pitnum(const pit_t t) = Pit(t);
Mech0(const mech_t t) = Mechanic(t);
Mech1(const mech_t t) = Mechanic(t);
Mech2(const mech_t t) = Mechanic(t);


Mech0 = Mechanic(0);
Mech1 = Mechanic(1);
Mech2 = Mechanic(2);
Mech3 = Mechanic(3);
*/

system 
	Pit, Mechanic;</system></nta>