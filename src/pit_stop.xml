<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>

const int MECH = 12; 
const int PITS = 3;


typedef int[0,PITS-1] pit_t; 
typedef int[0,MECH-1] mech_t; 


broadcast chan inPosition[PITS];
bool wheel[MECH*PITS], incoming[PITS], leaving[PITS];
clock clocks[PITS];</declaration><template><name x="5" y="5">Mechanic</name><parameter>int[0,MECH-1] mech</parameter><declaration>int mod(){
	return mech % PITS;
}</declaration><location id="id0" x="-40" y="200"><name x="-64" y="216">Working</name></location><location id="id1" x="-208" y="24" color="#ff0000"><name x="-218" y="-6">Delay</name></location><location id="id2" x="-368" y="200" color="#00ff00"><name x="-416" y="168">Waiting</name></location><location id="id3" x="-368" y="-136"><name x="-378" y="-166">Preparing</name></location><location id="id4" x="-40" y="-136"><name x="-24" y="-168">mechInPosition</name></location><init ref="id3"/><transition><source ref="id1"/><target ref="id2"/><nail x="-304" y="56"/></transition><transition controllable="false" action=""><source ref="id0"/><target ref="id1"/><label kind="guard" x="-192" y="56">clocks[mod()]&gt;20 &amp;&amp;
 wheel[mech]==1</label><nail x="-64" y="48"/></transition><transition action=""><source ref="id1"/><target ref="id0"/><label kind="guard" x="-304" y="120">wheel[mech]==0</label><nail x="-192" y="152"/></transition><transition controllable="false" action=""><source ref="id3"/><target ref="id1"/><label kind="guard" x="-272" y="-64">clocks[mod()]&gt;3</label><label kind="synchronisation" x="-288" y="-80">inPosition[mod()]?</label></transition><transition action=""><source ref="id2"/><target ref="id3"/><label kind="guard" x="-496" y="32">leaving[mod()]==1</label><label kind="assignment" x="-496" y="48">wheel[mech]:=0</label></transition><transition action=""><source ref="id4"/><target ref="id0"/><label kind="synchronisation" x="-32" y="16">inPosition[mod()]?</label></transition><transition action=""><source ref="id0"/><target ref="id2"/><label kind="guard" x="-272" y="216">clocks[mod()]&lt;=20</label><label kind="assignment" x="-264" y="200">wheel[mech]:=1</label></transition><transition action=""><source ref="id3"/><target ref="id4"/><label kind="guard" x="-264" y="-160">clocks[mod()]&lt;=3</label></transition></template><template><name>Pit</name><parameter>int[0, PITS-1] id</parameter><declaration>const int mech_per_pit = MECH/PITS ;

int wheelsReady()
{
	int it;
	for(it=0; it&lt;mech_per_pit; ++it)
	{
		if(!wheel[id +it*PITS]) 
			return 0;
	}
	return 1;
}

int nextCarIncoming()
{
	if(id == PITS-1)
		return 0;
	else
		return incoming[id+1];
}

int previousCarLeaving()
{
	if(id == 0)
		return 0;
	else
		return leaving[id-1];
}</declaration><location id="id5" x="24" y="120"><name x="14" y="90">Delay</name></location><location id="id6" x="-592" y="344"><name x="-632" y="336">Left</name></location><location id="id7" x="-248" y="120"><name x="-240" y="88">CarInPos</name></location><location id="id8" x="216" y="128" color="#ff0000"><name x="206" y="98">Crash</name></location><location id="id9" x="-248" y="-104"><name x="-258" y="-134">IncomingCar</name></location><location id="id10" x="-248" y="344" color="#00ff00"><name x="-232" y="336">Leave</name></location><location id="id11" x="-592" y="-104"><name x="-608" y="-136">Pit</name></location><init ref="id11"/><transition action=""><source ref="id5"/><target ref="id10"/><label kind="guard" x="-208" y="192">wheelsReady()==1</label></transition><transition controllable="false" action=""><source ref="id7"/><target ref="id5"/><label kind="guard" x="-216" y="128">clocks[id]&gt;20 &amp;&amp;
wheelsReady()==0</label></transition><transition action=""><source ref="id7"/><target ref="id10"/><label kind="guard" x="-400" y="176">wheelsReady()==1 &amp;&amp;
clocks[id]&lt;=20</label></transition><transition controllable="false" action=""><source ref="id6"/><target ref="id11"/><label kind="assignment" x="-576" y="96">leaving[id]:=0</label></transition><transition action=""><source ref="id10"/><target ref="id6"/><label kind="guard" x="-488" y="304">nextCarIncoming()==0</label><label kind="assignment" x="-488" y="320">leaving[id]:=1</label></transition><transition controllable="false" action=""><source ref="id10"/><target ref="id8"/><label kind="guard" x="0" y="256">nextCarIncoming()==1</label></transition><transition action=""><source ref="id9"/><target ref="id7"/><label kind="guard" x="-432" y="-32">previousCarLeaving()==0 &amp;&amp;
clocks[id]&gt;3</label><label kind="synchronisation" x="-344" y="8">inPosition[id]!</label><label kind="assignment" x="-344" y="24">incoming[id]:=0</label></transition><transition controllable="false" action=""><source ref="id9"/><target ref="id8"/><label kind="guard" x="-64" y="-40">previousCarLeaving()==1</label><label kind="comments">problem</label></transition><transition controllable="false" action=""><source ref="id11"/><target ref="id9"/><label kind="assignment" x="-448" y="-104">incoming[id]:=1,
clocks[id]:=0</label></transition></template><system>// List one or more processes to be composed into a system.
/*
Pitnum(const pit_t t) = Pit(t);
Mech0(const mech_t t) = Mechanic(t);
Mech1(const mech_t t) = Mechanic(t);
Mech2(const mech_t t) = Mechanic(t);


Mech0 = Mechanic(0);
Mech1 = Mechanic(1);
Mech2 = Mechanic(2);
Mech3 = Mechanic(3);
*/

system 
	Pit, Mechanic;</system></nta>