<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>

const int mechanics = 4; 
const int pits = 3;

typedef int[pits-1][mechanics-1] mech_t; 
typedef int[pits-1] pit_t; 


bool finished[mechanics];
chan ready[mechanics]; </declaration><template><name x="5" y="5">Mechanic</name><parameter>const mech_t wheel </parameter><declaration>
void finish(){
  finished[wheel] = true;
}
</declaration><location id="id0" x="-40" y="200"><name x="-50" y="170">Working</name></location><location id="id1" x="-40" y="312" color="#ff0000"><name x="-50" y="282">Problems</name></location><location id="id2" x="-296" y="200" color="#00ff00"><name x="-344" y="168">Waiting</name></location><location id="id3" x="72" y="-96"><name x="62" y="-126">Preparing</name></location><location id="id4" x="72" y="104"><name x="40" y="72">In position</name></location><init ref="id2"/><transition><source ref="id2"/><target ref="id3"/></transition><transition action=""><source ref="id4"/><target ref="id0"/><label kind="synchronisation" x="40" y="136">carInPosition?</label></transition><transition action=""><source ref="id0"/><target ref="id2"/><label kind="assignment" x="-200" y="208">finish()</label></transition><transition><source ref="id0"/><target ref="id1"/></transition><transition controllable="false" action=""><source ref="id3"/><target ref="id4"/></transition></template><template><name>Pit</name><parameter>const pit_t car</parameter><declaration>clock t;</declaration><location id="id5" x="-384" y="344"><name x="-424" y="336">Left</name></location><location id="id6" x="-248" y="120"><name x="-232" y="112">Car in position</name></location><location id="id7" x="32" y="32" color="#ff0000"><name x="22" y="2">Crash</name></location><location id="id8" x="-248" y="-104"><name x="-258" y="-134">Incoming Car</name><label kind="invariant" x="-264" y="-88">t&lt;=10</label></location><location id="id9" x="-248" y="344" color="#00ff00"><name x="-258" y="314">Leave</name></location><location id="id10" x="-384" y="-104"><name x="-400" y="-136">Pit Stop</name></location><init ref="id10"/><transition><source ref="id6"/><target ref="id9"/></transition><transition controllable="false" action=""><source ref="id5"/><target ref="id10"/><label kind="assignment" x="-452" y="120">leaving[car]=0</label></transition><transition action=""><source ref="id9"/><target ref="id5"/><label kind="assignment" x="-352" y="344">leaving[car]=1</label></transition><transition action=""><source ref="id9"/><target ref="id7"/><label kind="guard" x="-120" y="232">incoming[car+1]==1</label></transition><transition action=""><source ref="id8"/><target ref="id6"/><label kind="guard" x="-304" y="-32">t&gt;=5</label><label kind="synchronisation" x="-328" y="24">carInPosition!</label><label kind="assignment" x="-344" y="-8">incoming[car]=0</label></transition><transition action=""><source ref="id8"/><target ref="id7"/><label kind="guard" x="-136" y="-80">leaving[car-1]==1
t&lt;5</label><label kind="comments">problem</label></transition><transition controllable="false" action=""><source ref="id10"/><target ref="id8"/><label kind="assignment" x="-376" y="-104">incoming[car]=1
t=0</label></transition></template><system>// Place template instantiations here.
Process = Template();

// List one or more processes to be composed into a system.
system Process;</system></nta>